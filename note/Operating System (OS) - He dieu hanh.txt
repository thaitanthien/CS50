Operating System (OS) - He dieu hanh

Windows
(Microsoft)



Unix -> Linux -> Ubuntu
     -> MacOS (Apple) 
    (mobile)
     -> iOS (Apple)
     -> Android (Google)


---

Big O

Searching algorithms:
- Linear search
- Binary search

Problems => Input

- Array -> N = len(Array)
- Set ->   N = let(Set)

Input: ascending array A = [1,2,3]
       3
Output: true/false in A?

N = len(A)

- Linear search:  N     => O(N)
- Bineary search: logN  => O(logN)

Math: log(x) = log_10(x)
CS  : log(x) = log_2(x)

N = 1e11  
logN = 36

f = constant < logN < N < NlogN < N^2 < N^3 < constant^N < N!
O(f + g) = O(max(f, g))
O(f) + O(g) = O(f + g)
O(constant) = O(1)
---

int sum = 0;
O(1)

int sum = 0;
sum = 1 + 2;
O(1) + O(1) = O(2) = O(1)

int sum = 0; <- 1
for(int i = 0; i < n; i++) {
     sum += i;
}
<- 3 * n
1 + 1 + 3n = n in O(N)

int sum = 0;
for(int i = 0; i < n; i++) {
     for(int j = 0; j < n; j++) {
          sum += i * j;
     }
}
i = 0: n
i = 1: n
...
i = n-1: n
n*n = n^2 ~ O(N^2)

for(int i = 0; i < n; i++) {
     for(int j = 0; j < m; j++) {
          sum += i * j;
     }
}
O(N*M)

---

Binary search: sorted array

3

0  1  2  3  4  5  6  7  8  9
1  2  3  4  5  6  7  8  9  10

      r l
      
mid = (l + r) / 2
       0 + 9  / 2 = 4
N = len(array)
O(logN)



---

HE SO 

General, with a Base K number system:
- Digit representation: 0 -> (K-1) (K numbers)
- Digits: 0, 1, 2, 3, 4, ... (K - 1)

base X <----> base Y


Decimal System (Base 10 - He thap phan)
- Digit representation: 0 -> 9 (10 so)
- Digits: 0, 1, 2, 3,... 9
- Examples: 153235

Binary System (Base 2 - He nhi phan)
- Digit representation: 0 -> 1 (2 so)
- Digits: 0, 1
- Examples: 0b1011101001

Hexadecimal System (Base 16 - He thap luc phan)
- Digit representation: 0 -> 9, a, b, c, d, e, f (16 characters)
- Digits: 0, 1, 2, 3, 4, 5, 6.. , 9, a, b, c, d, e, f
- Examples: 0x5F, 0x04f

-------------

COMPUTERS UNDERSTAND BASE 2

bit
1 byte = 8 bits
1 kb   = 1000 byte
1 mb   = 1000 kb
1 gb   = 1000 mb
1 tb   = 1000 gb

--------------

BASE 10 ~ BASE 2 relationship

1-bit number ~ 2
ex: 0b0 = 0, 0b1 = 1

2-bit number ~ 4
ex: 0b00 = 0
    0b01 = 1
    0b10 = 2
    0b11 = 3

3-bit number ~ 8
ex: 0 -> 7

k-bit number ~ 2^k
ex: 0 -> 2^k - 1


----------------

1 Hexadecimal Digit ~ 4 bits

0b0000 = 0x0
0b0001 = 0x1
...
0b1111 = 0xf

----------------

Black White:
1 pixel ~ 1 bit

RGB:
1 pixel ~ 24 bit: R(8 bits), G(8 bits), B(8 bits)
R: 0 -> 255
G: 0 -> 255
B: 0 -> 255

Examples:
white = (255, 255, 255)
black = (0, 0, 0)
red = (255, 0, 0) = 0xff0000) 

RGB: 256^3 = 2^24

---------
















